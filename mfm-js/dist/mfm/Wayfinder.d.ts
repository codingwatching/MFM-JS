import { EWIndex } from "./EventWindow";
export type DirectionMap = Map<Direction, Direction>;
export type Direction = "N" | "E" | "S" | "W" | "NW" | "NE" | "SW" | "SE" | "NNW" | "WNW" | "SSW" | "WSW" | "NNE" | "ENE" | "SSE" | "ESE";
export declare class Wayfinder {
    static RANDOM: (subset?: Direction[]) => Direction;
    static NORTH: Direction;
    static SOUTH: Direction;
    static EAST: Direction;
    static WEST: Direction;
    static NORTHWEST: Direction;
    static NORTHEAST: Direction;
    static SOUTHWEST: Direction;
    static SOUTHEAST: Direction;
    static NORTHNORTHWEST: Direction;
    static WESTNORTHWEST: Direction;
    static NORTHNORTHEAST: Direction;
    static EASTNORTHEAST: Direction;
    static SOUTHSOUTHWEST: Direction;
    static WESTWOUTHWEST: Direction;
    static SOUTHSOUTHEAST: Direction;
    static EASTSOUTHEAST: Direction;
    static DIRECTIONS_PRIMARY: Direction[];
    static DIRECTIONS_SECONDARY: Direction[];
    static DIRECTIONS_TERTIARY: Direction[];
    static DIRECTIONS: Direction[];
    static W_LINE: EWIndex[];
    static N_LINE: EWIndex[];
    static S_LINE: EWIndex[];
    static E_LINE: EWIndex[];
    static NW_LINE: EWIndex[];
    static SW_LINE: EWIndex[];
    static NE_LINE: EWIndex[];
    static SE_LINE: EWIndex[];
    static WNW_LINE: EWIndex[];
    static NNW_LINE: EWIndex[];
    static NNE_LINE: EWIndex[];
    static ENE_LINE: EWIndex[];
    static WSW_LINE: EWIndex[];
    static SSW_LINE: EWIndex[];
    static SSE_LINE: EWIndex[];
    static ESE_LINE: EWIndex[];
    static W_QUADRANT: EWIndex[];
    static N_QUADRANT: EWIndex[];
    static S_QUADRANT: EWIndex[];
    static E_QUADRANT: EWIndex[];
    static NW_QUADRANT: EWIndex[];
    static SW_QUADRANT: EWIndex[];
    static NE_QUADRANT: EWIndex[];
    static SE_QUADRANT: EWIndex[];
    static NNW_QUADRANT: EWIndex[];
    static WNW_QUADRANT: EWIndex[];
    static SSW_QUADRANT: EWIndex[];
    static WSW_QUADRANT: EWIndex[];
    static NNE_QUADRANT: EWIndex[];
    static ENE_QUADRANT: EWIndex[];
    static SSE_QUADRANT: EWIndex[];
    static ESE_QUADRANT: EWIndex[];
    static DIRMAP_CLOCKWISE_PRIMARY: DirectionMap;
    static DIRMAP_COUNTERCLOCKWISE_PRIMARY: DirectionMap;
    static DIRMAP_CLOCKWISE_SECONDARY: DirectionMap;
    static DIRMAP_COUNTERCLOCKWISE_SECONDARY: DirectionMap;
    static DIRMAP_CLOCKWISE_ALL: DirectionMap;
    static DIRMAP_COUNTERCLOCKWISE_ALL: DirectionMap;
    static DIRMAP_REVERSE: DirectionMap;
    static DIRECTIONS_INDEX_MAP: Map<Direction, EWIndex>;
    static DIRECTIONS_FRONT_MAP: Map<Direction, EWIndex[]>;
    static DIRECTIONS_FRONT_QUADRANT_MAP: Map<Direction, EWIndex[]>;
    static DIRECTIONS_BEHIND_MAP: Map<Direction, EWIndex[]>;
    static DIRECTIONS_BEHIND_QUADRANT_MAP: Map<Direction, EWIndex[]>;
    static DIRECTIONS_LEFT_MAP: Map<Direction, EWIndex[]>;
    static DIRECTIONS_LEFT_QUADRANT_MAP: Map<Direction, EWIndex[]>;
    static DIRECTIONS_RIGHT_MAP: Map<Direction, EWIndex[]>;
    static DIRECTIONS_RIGHT_QUADRANT_MAP: Map<Direction, EWIndex[]>;
    static INDEX_DIRECTION_MAP: Map<number, Direction>;
    static directionToIndex(dir: Direction, useSecondaryDirections?: boolean): EWIndex;
    static indexToDirection(index: EWIndex, useSecondaryDirections?: boolean): Direction;
    static getDirectionalMove(dir: Direction, useSecondaryDirections?: boolean): EWIndex;
    static nextDirection(dir: Direction, directionMap: DirectionMap): Direction;
    static reverse(dir: Direction): Direction;
    static turnLeft(dir: Direction): Direction;
    static veerLeft(dir: Direction): Direction;
    static slightLeft(dir: Direction): Direction;
    static turnRight(dir: Direction): Direction;
    static veerRight(dir: Direction): Direction;
    static slightRight(dir: Direction): Direction;
    static getInFront(dir: Direction, getQuadrant?: boolean): EWIndex[];
    static getBehind(dir: Direction, getQuadrant?: boolean): EWIndex[];
    static getLeft(dir: Direction, getQuadrant?: boolean): EWIndex[];
    static getRight(dir: Direction, getQuadrant?: boolean): EWIndex[];
    static slightRandom(dir: Direction): Direction;
    static veerRandom(dir: Direction): Direction;
    static turnRandom(dir: Direction): Direction;
}
